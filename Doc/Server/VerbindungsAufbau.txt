Connect/Accept

Client sends:
1.	Name; Game Lobby Name; (Check if a same Game Lobby Name already exists and eventually reject the connection.)
	
TCP Accept Thread:
2.	Erstellt Verbindungs Object {Name; Game Lobby Name; IP; Port; Verbindungszeitpunkt)
a)	& Tr√§gt das in New Conenctions ein (wenn kein Partner Game Lobby gefunden wurde) oder
b)	Wenn ein Single Connection mit gleichen "Game Lobby Name" gefunden wurde:
		Es wird ein Game Session Object mit Thread erstellt.
		Es wird der gefunde Partner aus singles entfernt und ebenfalls in das Game Session object mitgenommen. 
TCP Accept Thread:


1. Connection Establishing
2. Client to Server: Name; Game Name

// 3.a) There is no found opponent in single connections
3.a) Server to Client: Waiting for Opponent; Timeout in [?] seconds; 
     (if timeout goto 4.a; if oppenent found goto 4.b)

// 3.b) There is a found opponent in single connections; Game can start immediately
3.b) Server to Client: Goto 4.b)

4.a) Server to Client: Timeout!

4.b) Server to Client: Gamestart! Cardnames for red; Cardnames for blue; Cardname in center;

5.a) Server to Client: It's your turn; Timeout in [?] seconds;
5.b) Server to Client: It's not your turn; Player will timeout in [?] seconds;

6) Client to Server: Cardname; Start & End Coordinates  (e.g. TIGER:H5G4)

7) Server to Client: Invalid move; It's your turn; Timeout in [?] seconds; 5.a)

8.a) Global Timeout  ???
8.b) Gameover; You have won/lost

Messages:
  			    MessageGreeting := player name; game name
    MessageWaitingOppoTimeoutIn := time left in s
  MessageWaitingOppoTimeoutFail := --- nothing ---
               MessageGamestart := opponent name; cardnames for red; cardnames for blue; cardname in center; players color
             MessageInvalidMove := reason
                    MessageMove := card name; start position; end position
    MessageWaitingMoveTimeoutIn := time left in s
MessageWaitingOppoMoveTimeoutIn := opponents time left in s
                MessageGameover := game result (win/loss/draw?); reason (move timeout/global timeout/throne captured/master killed)







List<PlayerConnect> _newConnections
List<PlayerConnect> _singleConnections

List<GameSession> _currentGame...


class GameSession
{
private:
	PlayerConnect spielerA;
	PlayerConnect spielerB;

}








